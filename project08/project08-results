Script started on 2022-03-10 16:11:47-05:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="92" LINES="24"]
]0;hh35@gold13: ~/cs214/project/project08[01;32mhh35@gold13[00m:[01;34m~/cs214/project/project08[00m$ java -ea NameTester[1Pesterls[Kmake javals[Kmake cleanls[Kcat NameTester.java
/* Aggregate Operations
 * Student: Haim Hong
 * Date: March 10 2022
 ************************************************************/

import java.awt.RenderingHints.Key;
import java.util.Scanner;

public class NameTester  
{
  public static void main(String[] args)
  {
      Name aName = new Name("John", "Paul", "Jones");

      assert aName.getFirst().equals("John") ;
      assert aName.getMiddle().equals("Paul") ;
      assert aName.getLast().equals("Jones") ;

      System.out.println(aName);
      assert aName.toString().equals("John Paul Jones");

      // Setting the Names
      aName.setFirst("David");
      aName.setMiddle("Justin");
      aName.setLast("Joshua");
      // Testing the Names
      assert aName.getFirst().equals("David") ;
      assert aName.getMiddle().equals("Justin") ;
      assert aName.getLast().equals("Joshua") ;

      // Setting Names for lfmi
      aName.setFirst("Tyler");
      aName.setMiddle("Henry");
      aName.setLast("Voss");
      // Testing lfmi Last First with Middle Initials
      assert aName.lfmi().equals("Voss, Tyler, H.");

      Scanner keyboard = new Scanner(System.in);
      // Reads the name
      System.out.println("Used previeous set First Middle Last. (Tyler Henry Voss for assert for readName");
      aName.readName(keyboard);
      // Using get function to check if it worked as you typed
      assert aName.getFirst().equals("Tyler");
      assert aName.getMiddle().equals("Henry");
      assert aName.getLast().equals("Voss");
      
      

      System.out.println("All tests passed!");
  }
}

// Replace this line with the declaration of class Name...

class Name
{
  private String myFirst, myMiddle, myLast; //the data members

  public Name(String first, String middle, String last) // initializes them
  {
    myFirst = first;
    myMiddle = middle;
    myLast = last;
  }

  public String getFirst()
  {
     return myFirst; // return the first name
  }
  public String getMiddle()
  {
     return myMiddle; // return the middle name
  }
  public String getLast()
  {
     return myLast; // // return the last name
  }
  public String toString()
  {
     return myFirst + ' ' + myMiddle + ' ' + myLast; //return the whole names
  }

  public void setFirst(String aFirst) // sets the first name into different name
  {
   myFirst = aFirst;
  }
  public void setMiddle(String aMiddle) // sets the middle name into different name
  {
   myMiddle = aMiddle;
  }
  public void setLast(String aLast) // sets the last name into different name
  {
   myLast = aLast;
  }
  public String lfmi() // returns last first middle initial
  { 
   return myLast + ", " + myFirst + ", " + myMiddle.charAt(0) + '.';
  }
  public void readName(Scanner input) // reads the names from user first middle last
  {
   System.out.println("Enter first name");
   myFirst = input.next();
   System.out.println("Enter middle name");
   myMiddle = input.next();
   System.out.println("Enter last name");
   myLast = input.next();
  }
}

]0;hh35@gold13: ~/cs214/project/project08[01;32mhh35@gold13[00m:[01;34m~/cs214/project/project08[00m$ make clean          ls
[0m[01;34mclojure[0m   Name.class       NameTester.class  NameTester.rb
Makefile  name_tester.adb  NameTester.java   script.java
]0;hh35@gold13: ~/cs214/project/project08[01;32mhh35@gold13[00m:[01;34m~/cs214/project/project08[00m$ make clean
rm -f *.class *.o *.ali *~ name_tester
]0;hh35@gold13: ~/cs214/project/project08[01;32mhh35@gold13[00m:[01;34m~/cs214/project/project08[00m$ ls
[0m[01;34mclojure[0m  Makefile  name_tester.adb  NameTester.java  NameTester.rb  script.java
]0;hh35@gold13: ~/cs214/project/project08[01;32mhh35@gold13[00m:[01;34m~/cs214/project/project08[00m$ make java
javac -deprecation NameTester.java
l]0;hh35@gold13: ~/cs214/project/project08[01;32mhh35@gold13[00m:[01;34m~/cs214/project/project08[00m$ ls  ls
[0m[01;34mclojure[0m   Name.class       NameTester.class  NameTester.rb
Makefile  name_tester.adb  NameTester.java   script.java
]0;hh35@gold13: ~/cs214/project/project08[01;32mhh35@gold13[00m:[01;34m~/cs214/project/project08[00m$ d java -ea NameTeser
Error: Could not find or load main class NameTeser
Caused by: java.lang.ClassNotFoundException: NameTeser
]0;hh35@gold13: ~/cs214/project/project08[01;32mhh35@gold13[00m:[01;34m~/cs214/project/project08[00m$ java -ea NameTeser[1@ter
John Paul Jones
Used previeous set First Middle Last. (Tyler Henry Voss for assert for readName
Enter first name
d Tyler
Enter middle name
Henry
Enter last name
Voss
All tests passed!
]0;hh35@gold13: ~/cs214/project/project08[01;32mhh35@gold13[00m:[01;34m~/cs214/project/project08[00m$ exit

Script done on 2022-03-10 16:12:28-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-03-10 16:18:33-05:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="92" LINES="24"]
]0;hh35@gold13: ~/cs214/project/project08[01;32mhh35@gold13[00m:[01;34m~/cs214/project/project08[00m$ cat name_) tester.adb
-- Aggregate Operations
-- Haim Hong
-- March 10 2022
----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;

procedure name_tester is

  NAME_SIZE : Integer := 8;

  type Name is -- record type for Name
  record
    MyFirst : String( 1..NAME_SIZE );
    MyMiddle : String( 1..NAME_SIZE );
    myLast : String ( 1..NAME_SIZE );
  end record;

  aName : Name ;

  ----------------------------------------------
  -- Init initializes a Name variable          -
  -- Receive: theName, the Name variable;      -
  --          First, the first name;           -
  --          Middle, the middle name;         -
  --          Last, the last name.             -
  -- Return: theName, its fields set to First, -
  --               Middle, and Last.           -
  ----------------------------------------------
  procedure Init (TheName : out Name; First, Middle, Last : in String) is

  begin
    TheName.MyFirst := First;
    TheName.MyMiddle := Middle;
    TheName.MyLast := Last;
  end Init;

  ----------------------------------------------
  -- getFirst(Name) retrieves Name.myFirst        -
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: theName.myFirst.                  -
  ----------------------------------------------
  function getFirst(TheName : in Name) return String is
  begin
    return TheName.MyFirst;
  end getFirst;
  ----------------------------------------------
  -- getMiddle(Name) retrieves Name.myMiddle        -
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: theName.myMiddle.                  -
  ----------------------------------------------
  function getMiddle(TheName : in Name) return String is
  begin
    return TheName.MyMiddle;
  end getMiddle;
  ----------------------------------------------
  -- getLast(Name) retrieves Name.myLast        -
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: theName.myLast.                  -
  ----------------------------------------------
  function getLast(TheName : in Name) return String is
  begin
    return TheName.MyLast;
  end getLast;

  -----------------------------------------------
  -- getFullName(Name) retrieves Name as a String  -
  -- Receive: theName, a Name.                  -
  -- PRE: theName has been initialized.         -
  -- Return: a String representation of theName -
  -----------------------------------------------
  function getFullName(TheName : in Name) return String is
  begin
    return TheName.MyFirst & ' ' & TheName.MyMiddle & ' ' & TheName.myLast;
  end  getFullName;

  ----------------------------------------------
  -- Put(Name) displays a Name value.          -
  -- PRE: theName has been initialized.        -
  -- Receive: theName, a Name.                 -
  -- Output: theName, to the screen.           -
  ----------------------------------------------
  procedure Put (TheName : in Name) is

  begin
    Put(TheName.MyFirst);
    Put(TheName.MyMiddle);
    Put(TheName.myLast);
  end Put;

  ----------------------------------------------
  -- setFirst(Name) sets New name for first    -
  -- PRE: theName has been initialized.        -
  -- Receive: theName, a Name, aFirst          -
  -- Return TheName with different firstName   -
  ----------------------------------------------
  procedure setFirst(TheName : in out Name; aFirst : in String) is
  begin
    TheName.MyFirst := aFirst; -- updates myFirst to new First
  end setFirst;

  ----------------------------------------------
  -- setMiddle(Name) sets New name for Middle  -
  -- PRE: theName has been initialized.        -
  -- Receive: theName, a Name, aMiddle         -
  -- Return TheName with different middleName  -
  ----------------------------------------------
  procedure setMiddle(TheName : in out Name; aMiddle : in String) is
  begin
    TheName.MyMiddle := aMiddle; -- updates myMiddle to new middle
  end setMiddle;

  ----------------------------------------------
  -- setFirst(Name) sets New name for Last     -
  -- PRE: theName has been initialized.        -
  -- Receive: theName, a Name, aLast           -
  -- Return TheName with different lastName    -
  ----------------------------------------------
  procedure setLast(TheName : in out Name; aLast : in String) is
  begin
    TheName.myLast := aLast; -- update myLast to new last
  end setLast;

  ----------------------------------------------
  -- lfmi(Name) gives name as last first middle initials -
  -- PRE: theName has been initialized.        -
  -- Receive: theName, a Name                  -
  -- Retruns Last First Middle initials        -
  ----------------------------------------------
  function lfmi (TheName : in Name)return String is
  begin
    return TheName.myLast & ", " & TheName.MyFirst & ", " & TheName.MyMiddle(1) & "."; -- Last, First, Middle Initial
  end lfmi;

  ----------------------------------------------
  -- readName(Name) reads the user inputs      -
  -- PRE: theName has been initialized. 
  -- Receive: theName, aName, user inputs in function -
  -- Returns the Name with new names from user inputs -
  ----------------------------------------------  
  procedure readName(TheName : in out Name) is
    input : String( 1..NAME_SIZE );
  begin
    Put("Enter First Name: ");
    Get(input); -- gets input
    TheName.MyFirst := input; -- puts that input to update names
    Put("Enter Middle Name: "); 
    Get(input); -- gets input
    TheName.MyMiddle := input; -- puts that input to update names
    Put("Enter Last Name: ");
    Get(input); -- gets input
    TheName.myLast := input; -- puts that input to update names
  end readName;
begin
  Init(aName, "John    ", "Paul    ", "Jones   ");

  pragma Assert( getFirst(aName) = "John    ", "getFirst() failed");
  pragma Assert( getMiddle(aName) = "Paul    ", "getMiddle() failed");
  pragma Assert( getLast(aName) = "Jones   ", "getLast() failed");
  pragma Assert( getFullName(aName) = "John     Paul     Jones   ", 
                    "getFullName() failed");



   Put(aName); New_line;

    -- Set the first middle and Last
  setFirst(aName, "Justin  ");
  setMiddle(aName, "Henry   ");
  setLast(aName, "Voss    ");
  -- check the first middle last
  pragma Assert( getFirst(aName) = "Justin  ", "getFirst() failed");
  pragma Assert( getMiddle(aName) = "Henry   ", "getMiddle() failed");
  pragma Assert( getLast(aName) = "Voss    ", "getLast() failed");
  
  
  -- check if lfmi correctly worked
  pragma Assert(lfmi(aName) = "Voss    , Justin  , H.", "lmfi() failed");
  put(lfmi(aName)); -- to check if correctly worked output for you
  New_Line;

  -- checking with the previous names for read Name assers
  Put_Line ("readName test using Justin Henry Voss");
  -- reads the name
  readName (aName);
  -- checking if all worked
  pragma Assert( getFirst(aName) = "Justin  ", "getFirst() failed");
  pragma Assert( getMiddle(aName) = "Henry   ", "getMiddle() failed");
  pragma Assert( getLast(aName) = "Voss    ", "getLast() failed");

  Put("All tests passed!"); New_line;

end name_tester;

]0;hh35@gold13: ~/cs214/project/project08[01;32mhh35@gold13[00m:[01;34m~/cs214/project/project08[00m$ ls
[0m[01;34mclojure[0m   [01;32mname_tester[0m      name_tester.ali  name_tester.o  script.ada
Makefile  name_tester.adb  NameTester.java  NameTester.rb  script.java
]0;hh35@gold13: ~/cs214/project/project08[01;32mhh35@gold13[00m:[01;34m~/cs214/project/project08[00m$ make clean
rm -f *.class *.o *.ali *~ name_tester
]0;hh35@gold13: ~/cs214/project/project08[01;32mhh35@gold13[00m:[01;34m~/cs214/project/project08[00m$ ls
[0m[01;34mclojure[0m  Makefile  name_tester.adb  NameTester.java  NameTester.rb  script.ada  script.java
]0;hh35@gold13: ~/cs214/project/project08[01;32mhh35@gold13[00m:[01;34m~/cs214/project/project08[00m$ make ada
gnatmake name_tester -gnata
x86_64-linux-gnu-gcc-7 -c -gnata name_tester.adb
x86_64-linux-gnu-gnatbind-7 -x name_tester.ali
x86_64-linux-gnu-gnatlink-7 name_tester.ali
]0;hh35@gold13: ~/cs214/project/project08[01;32mhh35@gold13[00m:[01;34m~/cs214/project/project08[00m$ ls
[0m[01;34mclojure[0m   [01;32mname_tester[0m      name_tester.ali  name_tester.o  script.ada
Makefile  name_tester.adb  NameTester.java  NameTester.rb  script.java
]0;hh35@gold13: ~/cs214/project/project08[01;32mhh35@gold13[00m:[01;34m~/cs214/project/project08[00m$ lsmake adals[Kmake cleanls[Kcat name_tester.adb[6P./name_testergnatmake name_tester.adb -gnata
gnatmake: "name_tester" up to date.
]0;hh35@gold13: ~/cs214/project/project08[01;32mhh35@gold13[00m:[01;34m~/cs214/project/project08[00m$ gnatmake name_tester.adb -gnatals[Kmake adals[Kgnatmake name_tester.adb -gnata[K./name_tester
John    Paul    Jones   
Voss    , Justin  , H.
readName test using Justin Henry Voss
Enter First Name: Justin  
Enter Middle Name: Henry   
Enter Last Name: Voss    
All tests passed!
]0;hh35@gold13: ~/cs214/project/project08[01;32mhh35@gold13[00m:[01;34m~/cs214/project/project08[00m$ exit

Script done on 2022-03-10 16:19:31-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-03-10 16:48:33-05:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="80" LINES="24"]
]0;hh35@gold13: ~/cs214/project/project08/clojure[01;32mhh35@gold13[00m:[01;34m~/cs214/project/project08/clojure[00m$ clojure -m nameTesterat src/nameTester.clj
;;;; Aggregate OPerations
;;;;
;;;; Output: results of testing Name functions.
;;;;
;;;; Haim Hong
;;;; March 10 2022
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns nameTester)   ; program name

;;; define a Clojure record named Name 
;;; (which compiles to a Java class).
(defrecord Name [firstName middleName lastName])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; make-Name constructs a Name from three strings. 
;;; Receive: firstN, middleN and lastN, three strings.
;;; Return: the Name (firstN middleN lastN). 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn make-Name [first middle last]
  (->Name first middle last))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFirst() extracts the first name of a Name object.
;;; Receive: aName, a Name.
;;; Return: the firstName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getFirst [^Name aName]
   (:firstName aName)  
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getMiddle() extracts the middle name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the middleName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getMiddle [^Name aName]
  (:middleName aName))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getLast() extracts the last name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the lastName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getLast [^Name aName]
  (:lastName aName))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFullName() returns a full name in F-M-L order. 
;;; Receive: aName, a Name. 
;;; Return: firstName, middleName, lastName,
;;;           separated by spaces. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn toString [^Name aName]
(str (:firstName aName) " " (:middleName aName)  " " (:lastName aName))
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; printName() displays a name object.
;;; Receive: aName, a Name.
;;; Output: the strings in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn printName [^Name aName]
  (print (toString aName)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setFirst() sets the First names into others
;;; Receive: aName, a Name, aFirst
;;; Returns the Name with new first but rest of them same
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn setFirst [^Name aName aFirst]
  (->Name aFirst (:middleName aName) (:lastName aName)) ;; all othersame but the FirstName
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setMiddle() sets the Middle names into others
;;; Receive: aName, a Name, aMiddle
;;; Returns the Name with new Middle but rest of them same
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn setMiddle [^Name aName aMiddle]
  (->Name (:firstName aName) aMiddle (:lastName aName)) ;; all other same but the MiddleName
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setLast() sets the Last names into others
;;; Receive: aName, a Name, aLast
;;; Returns the Name with new Last but rest of them same
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn setLast [^Name aName aLast]
  (->Name (:firstName aName) (:middleName aName) aLast) ;; all oter same but LastName
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; lfmi() displayes the name as Last, First, middle initial
;;; Receive: aName, a Name, aLast
;;; makes them string and returns the last first middle initial
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn lfmi [^Name aName]
  (str (:lastName aName) ", " (:firstName aName) ", " (subs (:middleName aName) 0 1) "." ) ;; makes it last first and middle initials
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; readName() reads the names 
;;; Receive: aName, aName
;;; Makes new nams with the inputs given
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn readName [^Name aName]
  (let [aFirst (read-line) aMiddle (read-line) aLast (read-line)] ;; reads them one by one
    (->Name aFirst aMiddle aLast)) ;; makes new ame wiht those
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A simple driver to test our Name functions. 
;;; Output: the result of testing our Name functions.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
   [; 3 ways to construct an object:
    name1 (make-Name "John" "Paul" "Jones")  ; -using our "make-" constructor
    name2 (->Name "Jane" "Penelope" "Jones") ; -invoking constructor directly
                                               ; -mapping field-names to values
    name3 (map->Name {:lastName "Jones" :firstName "Jinx" :middleName "Joy"})]
    ;; ----- SECTION 1 -----
    (println)
    (print name1) (println)
    (assert (= (getFirst name1) "John") "getFirst(1) failed")
    (assert (= (getMiddle name1) "Paul") "getMiddle(1) failed")
    (assert (= (getLast name1) "Jones") "getLast(1) failed")
    (assert (= (toString name1) "John Paul Jones") "toString(1) failed")
    (printName name1) (println)
    ;; ----- SECTION 2 -----
    (println)
    (print name2) (println)
    (assert (= (getFirst name2) "Jane") "getFirst(2) failed")
    (assert (= (getMiddle name2) "Penelope") "getMiddle(2) failed")
    (assert (= (getLast name2) "Jones") "getLast(2) failed")
    (assert (= (toString name2) "Jane Penelope Jones") "toString(2) failed")
    (printName name2) (println)
    ;; ----- SECTION 3 -----
    (println)
    (print name3) (println)
    (assert (= (getFirst name3) "Jinx") "getFirst(3) failed")
    (assert (= (getMiddle name3) "Joy") "getMiddle(3) failed")
    (assert (= (getLast name3) "Jones") "getLast(3) failed")
    (assert (= (toString name3) "Jinx Joy Jones") "toString(3) failed")
    (printName name3) (println)

    ;; set names assertions
    (assert (= (getFirst (setFirst name1 "Kentucky")) "Kentucky") "getFirst(1) failed")
    (assert (= (getMiddle (setMiddle name1 "Fried")) "Fried") "getMiddle(1) failed")
    (assert (= (getLast (setLast name1 "Chicken")) "Chicken") "getLast(1) failed")
    ;; anothers tests
    (assert (= (getFirst (setFirst name1 "Cookie")) "Cookie") "getFirst(1) failed")
    (assert (= (getMiddle (setMiddle name1 "Biscuit")) "Biscuit") "getMiddle(1) failed")
    (assert (= (getLast (setLast name1 "Jelly")) "Jelly") "getLast(1) failed")

    ;; last first middle initial check
    (assert (= (lfmi name1) "Jones, John, P.") "lfmi failed")
    (assert (= (lfmi name2) "Jones, Jane, P.") "lfmi failed")
    (assert (= (lfmi name3) "Jones, Jinx, J.") "lfmi failed")

    (println "\nUse Kentucky Fried Chicken for names")
    ;; readNames check
    (assert (= (toString (readName name1)) "Kentucky Fried Chicken") "toString failed")

    (println "\nAll tests passed!\n"))
)

]0;hh35@gold13: ~/cs214/project/project08/clojure[01;32mhh35@gold13[00m:[01;34m~/cs214/project/project08/clojure[00m$ cat src/nameTester.clj[1Plojure -m nameTesterat src/nameTester.clj[1Plojure -m nameTester

#nameTester.Name{:firstName John, :middleName Paul, :lastName Jones}
John Paul Jones

#nameTester.Name{:firstName Jane, :middleName Penelope, :lastName Jones}
Jane Penelope Jones

#nameTester.Name{:firstName Jinx, :middleName Joy, :lastName Jones}
Jinx Joy Jones

Use Kentucky Fried Chicken for names
d Kentucky
Fried
Chicken

All tests passed!

]0;hh35@gold13: ~/cs214/project/project08/clojure[01;32mhh35@gold13[00m:[01;34m~/cs214/project/project08/clojure[00m$ exit

Script done on 2022-03-10 16:48:48-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-03-10 16:45:05-05:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="80" LINES="24"]
]0;hh35@gold13: ~/cs214/project/project08[01;32mhh35@gold13[00m:[01;34m~/cs214/project/project08[00m$ ruby NameTester.rb[1Pcat NameTester.rb
# NameTester.rb tests class Name and its operations
#
# Completed by: Haim Hong
# Date: March 10 2022
####################################################

require 'test/unit/assertions'   # needed for assert
include Test::Unit::Assertions

# Replace this line with the declaration of class Name
class Name 
   def initialize (first, middle, last)
      @first, @middle, @last = first, middle, last #puts each into first middle last
   end

   attr_accessor :first, :middle, :last # becomes both asaccessor can have both properties

   def fullName
      @first + " " + @middle + " " + @last # adds the names into one
   end

   def print
      puts fullName # puts out the full name 
      fullName # returns the fullName
   end

   def lfmi #returns last to first name with middle initials
      @last + ", " + @first + ", " + @middle[0] + "."
   end

   def readName # reads each of the name first middle last
      puts "Enter First Name: \n"
      @first = gets.chomp
      puts "Enter Middle Name: \n"
      @middle = gets.chomp
      puts "Enter Last Name: \n"
      @last = gets.chomp
   end
end

def testName
   name = Name.new("John", "Paul", "Jones")

   assert name.first == "John", "first failed"
   assert name.middle == "Paul", "middle failed"
   assert name.last == "Jones", "last failed"
   assert name.fullName == "John Paul Jones", "fullName failed"
   assert name.print == "John Paul Jones", "print failed"
   
   # attr_accessor
   name.first = "Sam"
   name.middle = "Josh"
   name.last = "Billy"
   # checking if read into it correctly
   assert name.first == "Sam", "first failed"
   assert name.middle == "Josh", "middle failed"
   assert name.last == "Billy", "last failed"
   assert name.print == "Sam Josh Billy", "print failed"

   # last first middle initials
   assert name.lfmi == "Billy, Sam, J.", "lmfi failed"

   puts "readName using Sam Josh Billy\n"
   # readName to read the names
   name.readName
   # check if its the right ones using previous names
   assert name.first == "Sam", "first failed"
   assert name.middle == "Josh", "middle failed"
   assert name.last == "Billy", "last failed"

   print "All tests passed!\n"
end

testName

]0;hh35@gold13: ~/cs214/project/project08[01;32mhh35@gold13[00m:[01;34m~/cs214/project/project08[00m$ cat NameTester.rb[1@ruby NameTester.rb
John Paul Jones
Sam Josh Billy
readName using Sam Josh Billy
Enter First Name: 
Sam
Enter Middle Name: 
Josh
Enter Last Name: 
Billy
All tests passed!
]0;hh35@gold13: ~/cs214/project/project08[01;32mhh35@gold13[00m:[01;34m~/cs214/project/project08[00m$ exit

Script done on 2022-03-10 16:45:14-05:00 [COMMAND_EXIT_CODE="0"]
