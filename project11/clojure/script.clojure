Script started on 2022-03-31 16:39:51-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
]0;hh35@gold24: ~/cs214/project/project11/clojure[01;32mhh35@gold24[00m:[01;34m~/cs214/project/project11/clojure[00m$ clojure -m max[1Pat src/*.clj
;; listOps.clj is a Clojure "module" for list operations.
;;
;; Completed by: Haim Hong
;; Date: March 31 2022
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; maxOf2() finds the maximum of two values.  
;; Receive: val1, val2, two values.  
;; PRE: val1 and val2 can be compared using >.
;; Return: the maximum of val1 and val2. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn maxOf2 [val1 val2]
  (if (> val1 val2)      ; if val1 > val2
    val1                 ;   return val1
    val2                 ; else return val2
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; listMax() finds the maximum value in a list.
;; Receive: aList, a list of values.    
;; PRE: aList is a list 
;;      values in aList can be compared using >.
;; Return: the maximum value in aList.         
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn listMax [aList]
  (if (list? aList)
    (if (empty? aList)
      nil
      (let [firstVal (first aList)]
        (if (= (count aList) 1)
          firstVal
          (maxOf2 firstVal (listMax (rest aList))))))
    nil))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Search() finds the maximum value in a list.
;; Receive: aList, a list of values, aValue    
;; PRE: aList is a list 
;; Return: the index of the list, if its empty or not there returns -1      
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn search [aList aVal counter] 
  (if (list? aList)
    (if (empty? aList)
      -1
        (if (= (first aList) aVal)
          counter
          (search (rest aList) aVal (+ counter 1))))
  -1)
)


;; using Clojure's built-in max and apply functions
(defn listMax2 [aList]
  (if (list? aList)       ; if aList is a list:
    (if (empty? aList)    ;  if aList is empty:
      nil                 ;    nil
      (apply max aList)   ;  else apply max to 
)                     ;        the items in aList
    ))

;; max.clj tests a function to search a list for its maximum value.
;;
;; Output: three lists, and 
;;          the results of calling a maxList() function on them.
;;
;; Completed by: Haim Hong
;; Date: March 31 2022
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns max)

(load "listOps")                      ; load module

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function -main tests function listMax(). 
;; Output: the results of testing listMax() on various lists.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
   [list1 '(99 88 77 66 55)        ; max is first value
    list2 (list 55 66 77 88 99)    ; max is last value
    list3 (list 55 77 99 88 66)    ; max is middle value
    emptyList '()                  ; list is empty
    list4 (list 44 55 66 77 88)
    ]

    (println)
    (println "list1: " list1)        ; print list1,
    (println "list2: " list2)        ;   list2,
    (println "list3: " list3)        ;   list3,
    (println "empty: " emptyList)    ;   list3,
    (println)                        ;   and their maxima
    (println "The max value in list1 is: " (listMax list1))
    (println "The max value in list2 is: " (listMax list2))
    (println "The max value in list3 is: " (listMax list3))
    (println)
    (println "The max of an empty list is: " (listMax emptyList))
    (println)
    ;; testing listMax2 if its behaving the same
    (println "The max value in list1 is: " (listMax2 list1))
    (println "The max value in list2 is: " (listMax2 list2))
    (println "The max value in list3 is: " (listMax2 list3))
    (println)
    
    (println "The Index of 99 in list1 is: " (search list1 99 0))
    (println "The Index of 99 in list2 is: " (search list2 99 0))
    (println "The Index of 99 in list3 is: " (search list3 99 0))
    (println "The Index of 99 in list4 is: " (search list4 99 0))
    (println "The Index of 99 in emptyList is: " (search emptyList 99 0))
    (println))
)

]0;hh35@gold24: ~/cs214/project/project11/clojure[01;32mhh35@gold24[00m:[01;34m~/cs214/project/project11/clojure[00m$ cat src/*.cljlojure -m max

list1:  (99 88 77 66 55)
list2:  (55 66 77 88 99)
list3:  (55 77 99 88 66)
empty:  ()

The max value in list1 is:  99
The max value in list2 is:  99
The max value in list3 is:  99

The max of an empty list is:  nil

The max value in list1 is:  99
The max value in list2 is:  99
The max value in list3 is:  99

The Index of 99 in list1 is:  0
The Index of 99 in list2 is:  4
The Index of 99 in list3 is:  2
The Index of 99 in list4 is:  -1
The Index of 99 in emptyList is:  -1

]0;hh35@gold24: ~/cs214/project/project11/clojure[01;32mhh35@gold24[00m:[01;34m~/cs214/project/project11/clojure[00m$ exit

Script done on 2022-03-31 16:39:59-04:00 [COMMAND_EXIT_CODE="0"]
